--------------------------------------------------------------------
procedure misioneros_y_canibales is
-- Juego interactivo para resolver el problema de los misioneros y los canÃ­bales
--------------------------------------------------------------------
integer estado[5], estado_final[5], accion;
boolean fin;
--------------------------------------------------------------------
procedure inicializar (ref integer e[5], ef[5]) is
--------------------------------------------------------------------
begin
   e[0] := 3;
   e[1] := 3;
   e[2] := 0;
   e[3] := 0;
   e[4] := 0;

   ef[0] := 0;
   ef[1] := 0;
   ef[2] := 1;
   ef[3] := 3;
   ef[4] := 3;
end
--------------------------------------------------------------------
procedure escribir_estado (ref integer e[5]) is
--------------------------------------------------------------------
  procedure escribir (ref integer r[5]) is
  --------------------------------------------------------------------
  begin
     put_line(r[3]);
  end
--------------------------------------------------------------------
begin
   put("    ", e[0], "           ", e[1], "     ");
   if (e[2] = 0) then
      put("izquierda");
   else
      put(" derecha ");
   end
   escribir(e);
   put("     ", e[3], "           ", e[4]);
   put_line("");
end
--------------------------------------------------------------------
procedure escribir_acciones (ref integer e[5]) is
--------------------------------------------------------------------
begin
   put_line("Escribe el numero correspondiente a uno de estos movimientos:");
   put_line("1. 1 canibal");
   put_line("2. 2 canibales");
   put_line("3. 1 canibal y un misionero");
   put_line("4. 1 misionero");
   put_line("5. 2 misioneros");
   put_line("");
   put_line("Mi eleccion: ");
end
--------------------------------------------------------------------
procedure intentar_movimiento (ref integer e[5]; val integer a) is
--------------------------------------------------------------------
boolean error;
begin
   error := true;
   if (e[2] = 0) then
      if (a = 1) then
         if ((e[0] >= 1) and (((e[3] + 1) <= e[4])) or (e[4] = 0)) then
            e[0] := e[0] - 1;
            e[3] := e[3] + 1;
            error := false;
         end
      else if (a = 2) then
         if ((e[0] >= 2) and (((e[3] + 2) <= e[4])) or (e[4] = 0)) then
            e[0] := e[0] - 2;
            e[3] := e[3] + 2;
            error := false;
         end
      else if (a = 3) then
         if ((e[0] >= 1) and (e[1] >= 1) and (e[3] <= e[4])) then
            e[0] := e[0] - 1;
            e[1] := e[1] - 1;
            e[3] := e[3] + 1;
            e[4] := e[4] + 1;
            error := false;
         end
      else if (a = 4) then
         if ((e[1] >= 1) and ((e[1] - 1) >= e[0]) and (e[3] <= e[4])) then
            e[1] := e[1] - 1;
            e[4] := e[4] + 1;
            error := false;
         end
      else if (a = 5) then
         if ((e[1] >= 2) and ((e[1] - 2) >= e[0]) and (e[3] <= e[4]+2)) then
            e[1] := e[1] - 2;
            e[4] := e[4] + 2;
            error := false;
         end
      end end end end end
      e[2] := 1;
   else
      if (a = 1) then
         if ((e[3] >= 1) and (((e[0] + 1) <= e[1]) or (e[1] = 0))) then
            e[0] := e[0] + 1;
            e[3] := e[3] - 1;
            error := false;
         end
      else if (a = 2) then
         if ((e[3] >= 2) and (((e[0] + 2) <= e[1]) or (e[1] = 0))) then
            e[0] := e[0] + 2;
            e[3] := e[3] - 2;
            error := false;
         end
      else if (a = 3) then
         if ((e[3] >= 1) and (e[4] >= 1) and (e[0] <= e[1])) then
            e[0] := e[0] + 1;
            e[1] := e[1] + 1;
            e[3] := e[3] - 1;
            e[4] := e[4] - 1;
            error := false;
         end
      else if (a = 4) then
         if ((e[4] >= 1) and ((e[4] - 1) >= e[3]) and (e[0] <= e[1]+1)) then
            e[1] := e[1] + 1;
            e[4] := e[4] - 1;
            error := false;
         end
      else if (a = 5) then
         if ((e[4] >= 2) and ((e[4] - 2) >= e[3]) and (e[0] <= e[1]+2)) then
            e[1] := e[1] + 2;
            e[4] := e[4] - 2;
            error := false;
         end
      end end end end end
      e[2] := 0;
   end
   if (error) then
      put_line("No es posible realizar ese movimiento");
      put_line("Canibales Misioneros   Barca   Canibales Misioneros");
   end
end
--------------------------------------------------------------------
function boolean comprobar_estado (ref integer e[5], ef[5]) is
--------------------------------------------------------------------
begin
   if (e[0] <> ef[0]) then
      return false;
   else if (e[1] <> ef[1]) then
      return false;
   else if (e[2] <> ef[2]) then
      return false;
   else if (e[3] <> ef[3]) then
      return false;
   else if (e[4] <> ef[4]) then
      return false;
   else
      return true;
end end end end end end
--------------------------------------------------------------------
begin
   inicializar(estado, estado_final);
   fin := false;
   put_line("Canibales Misioneros Barca Canibales Misioneros");
   while (not fin) do
      escribir_estado(estado);
      escribir_acciones(estado);
      get(accion);
      intentar_movimiento(estado, accion);
      fin := comprobar_estado(estado, estado_final);
      if (fin) then
         put_line("Objetivo alcanzado!!!");
      end
   end
   escribir_estado(estado);
   put_line("");
   put_line("GAME OVER");
end
