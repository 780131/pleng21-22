//-----------------------------------------------------------------------------
// - File: adac.jj
// - Author: Sergio Gabete César (774631) & Devid Dokash (780131).
// - Date: 20/03/2022 (last version).
// - Coms: https://javacc.github.io/javacc/tutorials/token-manager.html. Imple-
// mentacion del analizador sintactico.
// - Version: 1.
// - Version-Info: nuevas reglas respecto a funciones definidas en adac para su 
// diferenciacion a nombres de variable, correccion de regex de comentarios.
//-----------------------------------------------------------------------------

options {
   COMMON_TOKEN_ACTION = true;
}

PARSER_BEGIN(adac)
package traductor;

public class adac {
    public static void main(String[] args) throws java.io.FileNotFoundException, 
			ParseException {
    	adac parser;

    	try {
			// Entrada desde stdin.
	    	if(args.length == 0) {
				parser = new adac(System.in);
			}
			// Entrada desde fichero en args[0].
			else {
	            parser = new adac(new java.io.FileInputStream(args[0])); 
			}
			// Invoca símbolo inicial de la gramática.
			parser.main();
			System.out.println("Compilacion con exito");

		} catch (java.io.FileNotFoundException e) {
			System.err.println ("Fichero " + args[0] + " no encontrado.");
		} catch (TokenMgrError e) {
        	System.err.println("LEX_ERROR: " + e.getMessage());
        } 
    }
}
PARSER_END(adac)

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
// ANALIZADOR LEXICO.
//-----------------------------------------------------------------------------
// Se ignoran espacios, saltos de linea, caracteres que no aportan informacion
// al analisis lexico.
SKIP: {
	" " | "\t" | "\r" | "\n" | "\r\n"
}

//-----------------------------------------------------------------------------
// Funcion global para todos los tokens. Imprimir por pantalla la linea, la 
// columna, el tipo de token y el valor del token que ha hecho match.
TOKEN_MGR_DECLS: {
	static void CommonTokenAction(Token t){
		System.out.println("(" + t.beginLine + "," + t.beginColumn + "): " 
			+ adacConstants.tokenImage[t.kind] + " \"" + t + "\"");
	}
}

//-----------------------------------------------------------------------------
// Conjuntos.
TOKEN: {
 		< #LETTER: ["a"-"z","A"-"Z"] >
	|	< #DIGIT: ["0"-"9"] >
}

//-----------------------------------------------------------------------------
// Comentarios: SPECIAL_TOKEN ya que interesa ignorar los comentarios y no 
// procesarlos.
SPECIAL_TOKEN: {
	< COMMENT: "--"(~["\n"])*("\n")? >
}

//-----------------------------------------------------------------------------
// Sintaxis general.
TOKEN: {
		< SCOLON: ";" >
	|	< COLON: "," >
	|	< LPAREN: "(" > 
	|	< RPAREN: ")" > 
	|	< LBRACK: "[" > 
	|	< RBRACK: "]" >
}

//-----------------------------------------------------------------------------
// Tipos y constantes: enteros, booleanos y caracteres, tanto como dato simple
// como array. En algunas funciones se permite el uso de strings pero no como
// variables.
TOKEN: {
		< INT: "integer" >				
	|	< BOOL: "boolean" >				
	|	< CHAR: "character" >			
	|	< INTVAL: (< DIGIT >)+ >	
	|   < CHARVAL: "'"(~[])"'" >			
	|   < BOOLVAL: "true" | "false" >
	|	< STRING: "\""(~["\""])*"\"" >
}

//-----------------------------------------------------------------------------
// Operaciones de asignacion y aritmeticologicas.
TOKEN: {
    	< ASS: ":=" > 
    |	< ADD: "+" >		
    |	< SUB: "-" >		
    |	< MUL: "*" >		
    |	< DIV: "div" >		
    |	< MOD: "mod" >		
    |	< EQ: "=" >		
    |	< NE: "<>" >	
    |	< LT: "<" >	
    |	< GT: ">" >
    |	< LE: "<=" >	
    |	< GE: ">=" >	
    |	< AND: "and" >		
    |	< OR: "or" >		
    |	< NOT: "not" >		
}

//-----------------------------------------------------------------------------
// Declaracion de funciones y procedimientos.
TOKEN: {
		< FUNC: "function" >
	|	< PROC: "procedure" >
	|	< IS: "is" >			
	|	< VAL: "val" >		
	|	< REF: "ref" >		
	|	< RETURN: "return" >	
}


//-----------------------------------------------------------------------------
// Declaracion de funciones existentes en adac.
TOKEN: {
		< PUT: "put" >
	|	< PUTLINE: "put_line" >
	| 	< CHAR2INT: "char2int" >
	|	< INT2CHAR: "int2char" >
	|   < SKIPLINE: "skip_line" >
}

//-----------------------------------------------------------------------------
// Declaracion de estructuras de control: if & while.
TOKEN: {
    	< IF: "if" > 
	| 	< THEN: "then" >
	| 	< ELSE: "else" >
	|	< WHILE: "while" >
    |	< DO: "do" >	
}

//-----------------------------------------------------------------------------
// Declaracion de cuerpo.
TOKEN: {
		< BEGIN: "begin" > 
	| 	< END: "end" >
}

//-----------------------------------------------------------------------------
// Declaracion de nombres.
TOKEN: {
	< ID: ("_" | < LETTER > | < LETTER >"_")(< LETTER > | < LETTER >"_" | < DIGIT > | < DIGIT >"_")* >
}

//-----------------------------------------------------------------------------
// Errores.
SPECIAL_TOKEN: {
	< UNKNOWN: (~[]) >	
		{ 
			System.err.println("ERROR LEXICO: (" + 
				matchedToken.beginLine + "," + matchedToken.beginColumn + 
				"): simbolo no reconocido: " + matchedToken);
		}
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
// ANALIZADOR SINTATICO.
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------

void main() :
{} {
	<PROC> <ID> <IS> vars_def() procs_funcs_decl() proc_func_body()
}

void vars_def():
{} {
	( vars_decl <SCOLON> )*
}

void vars_decl():
{} {
	vars_type() variable() ( <COLON> variable() )*
}

void vars_type():
{} {
	<INT> | <BOOL> | <CHAR>
}

void variable():
{} {
	LOOKAHEAD(2) <ID> <OBRACK> <INTVAL> <CBRACK> | <ID> 
}

void procs_funcs_decl ():
{} {
	(proc_func_decl)*
}

void proc_func_decl():
{} {
	proc_or_func() func_return() <ID> <LPAREN> params_decl() <RPAREN> <IS> proc_func_body()
}

void proc_or_func():
{} {
	<PROC> | <FUNC>
}

void func_return():
{} {
	vars_type() | {}
}

void params_decl():
{} {
	param_class() vars_decl() (<COLON> params_decl())* 
}

void param_class():
{} {
	<VAL> | <REF>
}

//empieza en begin y acaba en end, sirve para proc_def a parte de para el main
void proc_func_body():
{} {
	<BEGIN> (instructions())* <END>
}

void instructions():
{} {
	asignable() <ASS> expresion() <SCOLON> 
	| <WHILE> expresion() <DO> instructions() <END> 
	| <IF> expresion() <THEN> instructions() aditional_else() <END>
}

void asignable():
{} {
	LOOKAHEAD(2)  <ID> <LBRACK> expresion() <RBRACK> | <ID>
}

void expresion (): 
{}
{
  expresion_simple() ( operador_relacional() expresion_simple() )?
}


void operador_relacional():
{}
{
	  <EQ>
	| <LT>
	| <GT>
	| <LE>
	| <GE>
	| <NE>
}


void expresion_simple (): 
{}
{
	( <ADD> | <SUB> )?
  termino() ( operador_aditivo() termino() )*
} 
  

void operador_aditivo ():
{}
{
	<ADD>
	| <SUB>
	| <OR>
}

void termino ():
{}
{
	factor() ( operador_multiplicativo() factor() )*
}

void operador_multiplicativo ():
{}
{
	  <MUL>
	| <MOD>
	| <DIV>
	| <AND>
}


void factor ():
{}
{
	  <NOT> factor()
	| <LPAREN> expresion() <RPAREN>
	| <INT2CHAR> <LPAREN> expresion() <RPAREN>
	| <CHAR2INT> <LPAREN> expresion() <RPAREN>
	| LOOKAHEAD(2)  <ID> <LPAREN> (expresion())* <RPAREN>
	| LOOKAHEAD(2)  <ID> <LBRACK> expresion() <RBRACK>
	| <ID>
	| <INTVAL>
	| <CHARVAL>
	| <STRING>
	| <BOOLVAL>
}
