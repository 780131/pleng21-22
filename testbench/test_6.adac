procedure hello is
    character c[5];
    character vec1[20];
    character vec2[20];
    integer vec3[100];
    integer vec4[100]; 
    boolean vec5[30];
    boolean vec6[20];
    character b;
    integer a;
    boolean g;
    integer prueba1,prueba2;
    character prueba3;
    boolean prueba4;
    procedure hola(ref integer b, c) is
        integer a;
    begin
        a := a + 1;
    end

    function integer comprobar(val integer a,b) is
        character f;
    begin
        return a+b;
    end

    function integer comprobarVec(val integer a[100], b[100]) is
        character f;
        integer p;
    begin
        --p := a+b;
        return a[0]+b[0];
    end

    procedure comprobar2() is
    begin
        
    end

begin
    if g then
        g := false;
    end
    c[0] := 'c';
    get(b,a);
    g := not false;
    c[0] := c[0];
    a := char2int(vec6[0]);
    a := int2char(b);
    a := char2int(g);
    get(b);
    get(a);
    --get(g);
    --get(c);
    get(c[1]);
    get(c[g and g]);
    --a := comprobar(a,a);
    --a := comprobar(a,a);
    --a := comprobar(b,b);
    --b := comprobar(b,b);
    --b := comprobar(a,a);
    --b := comprobar(b,b,b);
    --comprobar2();
    --a := comprobar2();
    --if(vec1 = vec2) then
    --end
    --a := comprobar(vec3,vec4);
    a := comprobarVec(vec3,vec4);
    --a := comprobarVec(vec1,vec2);
    --get(vec1);
    get(vec1[10]);
    get(vec3[10]);
    get(vec5[100]);
    vec5[50]:=false;
    vec5:=false;
    prueba1 := prueba1 + prueba2;
    prueba1 := prueba1 - prueba2;
    prueba1 := prueba1 * prueba2;
    prueba1 := prueba1 div prueba2;
    prueba1 := prueba1 mod prueba2;
    --prueba1 := prueba1 + prueba3; 
    --prueba1 := prueba1 - prueba3;
    --prueba1 := prueba1 * prueba3;
    --prueba1 := prueba1 div prueba3;
    --prueba1 := prueba1 mod prueba3;
    prueba4 := prueba4 and prueba4;
    --prueba4 := prueba4 and prueba3;
    prueba4 := ((prueba1+prueba2)=(prueba1+prueba2)) or ((prueba1+prueba2)=(prueba1+prueba2)) or 10;   
    prueba1 := prueba1>prueba1;
    prueba4 := prueba1<prueba1;
    prueba4 := prueba1>=prueba1;
    prueba4 := prueba1<=prueba1;
    prueba4 := prueba1=prueba1;
    prueba4 := prueba1<>prueba1;

    prueba4 := prueba1<prueba4;
    prueba4 := prueba1>=prueba2;
    prueba4 := prueba3<=prueba1;
    prueba4 := prueba1=prueba4;
    prueba4 := prueba1<>prueba5;
    skip_line();
    --skip_line(prueba1);
    --put();
    put("hola");
    put("hola",prueba1,prueba4,2+3,prueba1 and prueba3);
    put("hola",prueba1,prueba4,2+3,prueba4 or (prueba1<prueba2));
    while(2=2) do

    end
    while(2+2) do

    end
    while(comprobar(2,2)=3) do

    end
    while(prueba4 and prueba3) do

    end
    while(prueba4 or (prueba1<prueba2)) do

    end
    while(comprobar(2,2,vec3)=3) do

    end

    
end


--vec + vec da error (eso esta bien)