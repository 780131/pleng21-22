//-----------------------------------------------------------------------------
// - File: adac.jj
// - Author: Sergio Gabete César (774631) & Devid Dokash (780131).
// - Date: 20/03/2022 (last version).
// - Coms: https://javacc.github.io/javacc/tutorials/token-manager.html. Imple-
// mentacion del analizador sintactico.
// - Version: 1.
// - Version-Info: nuevas reglas respecto a funciones definidas en adac para su 
// diferenciacion a nombres de variable, correccion de regex de comentarios.
//-----------------------------------------------------------------------------

options {
   //COMMON_TOKEN_ACTION = true;
}

PARSER_BEGIN(adac)
package traductor;
import lib.attributes.Attributes;
import lib.symbolTable.*;
import lib.symbolTable.exceptions.*;
import lib.symbolTable.Symbol.ParameterClass;
import lib.symbolTable.Symbol.Types;
import lib.tools.SemanticFunctions;
import lib.tools.SemanticFunctions.Operator;
import lib.tools.exceptions.*;
import java.util.ArrayList;

public class adac {

	//Se declara la tabla de simbolos
	static SymbolTable st;
	static SemanticFunctions sf;

	static int errors = 0;

	//Funcion que a lo mejor hay que cambiar
	private static void initSymbolTable() {
		boolean b;
		String[] palsRes = {
	    	"var","const","escribir"
		};

		st.insertReservedWords(palsRes);
	}

	public static void panicMode(Token err, int type) {
		errors++;
		System.err.println("ERROR SINTACTICO: (" + err.beginLine + "," 
			+ err.beginColumn + "): " + err);
		System.err.println("----> Iniciando recuperacion en modo panico..."
			+ "\n----> Saltando todo hasta token de conjunto de sincronizacion");
		Token t = getNextToken();
		if (type == 0) {
			while(t.kind != EOF) {
				System.err.println("Descartando token ("
					+ adacConstants.tokenImage[t.kind] + "," + t.image + ")");
				t = getNextToken();
			}
		} else {
			while(t.kind != SCOLON && t.kind != END && t.kind != EOF) {
				System.err.println("Descartando token ("
					+ adacConstants.tokenImage[t.kind] + "," + t.image + ")");
				t = getNextToken();
			}
		}
	}


    public static void main(String[] args) throws java.io.FileNotFoundException, 
			ParseException {
    	adac parser;

    	try {
			//Se iniciar y crea la tabla de simbolos pero esta vacia
			st = new SymbolTable();
    		initSymbolTable();
			sf = new SemanticFunctions();

			// Entrada desde stdin.
	    	if(args.length == 0) {
				parser = new adac(System.in);
			}
			// Entrada desde fichero en args[0].
			else {
	            parser = new adac(new java.io.FileInputStream(args[0])); 
			}
			// Invoca símbolo inicial de la gramática.
			parser.main();
			if (errors == 0 && sf.getErrorSemantico().getContadorErrores() == 0) System.out.println("Compilacion con exito.");
			else System.out.println("Compilacion con errores.");
		} catch (java.io.FileNotFoundException e) {
			System.err.println ("Fichero " + args[0] + " no encontrado.");
		} catch (TokenMgrError e) {
        	System.err.println("LEX_ERROR: " + e.getMessage());
        } 
    }
}
PARSER_END(adac)

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
// ANALIZADOR LEXICO.
//-----------------------------------------------------------------------------
// Se ignoran espacios, saltos de linea, caracteres que no aportan informacion
// al analisis lexico.
SKIP: {
	" " | "\t" | "\r" | "\n" | "\r\n"
}

//-----------------------------------------------------------------------------
// Funcion global para todos los tokens. Imprimir por pantalla la linea, la 
// columna, el tipo de token y el valor del token que ha hecho match.
//TOKEN_MGR_DECLS: {
//	static void CommonTokenAction(Token t){
//		System.out.println("(" + t.beginLine + "," + t.beginColumn + "): " 
//			+ adacConstants.tokenImage[t.kind] + " \"" + t + "\"");
//	}
//}

//-----------------------------------------------------------------------------
// Conjuntos.
TOKEN: {
 		< #LETTER: ["a"-"z","A"-"Z"] >
	|	< #DIGIT: ["0"-"9"] >
}

//-----------------------------------------------------------------------------
// Comentarios: SPECIAL_TOKEN ya que interesa ignorar los comentarios y no 
// procesarlos.
SPECIAL_TOKEN: {
	< COMMENT: "--"(~["\n"])*("\n")? >
}

//-----------------------------------------------------------------------------
// Sintaxis general.
TOKEN: {
		< SCOLON: ";" >
	|	< COLON: "," >
	|	< LPAREN: "(" > 
	|	< RPAREN: ")" > 
	|	< LBRACK: "[" > 
	|	< RBRACK: "]" >
}

//-----------------------------------------------------------------------------
// Tipos y constantes: enteros, booleanos y caracteres, tanto como dato simple
// como array. En algunas funciones se permite el uso de strings pero no como
// variables.
TOKEN: {
		< INT: "integer" >				
	|	< BOOL: "boolean" >				
	|	< CHAR: "character" >			
	|	< INTVAL: (< DIGIT >)+ >	
	|   < CHARVAL: "'"(~[])"'" >			
	|   < BOOLVAL: "true" | "false" >
	|	< STRING: "\""(~["\""])*"\"" >
}

//-----------------------------------------------------------------------------
// Operaciones de asignacion y aritmeticologicas.
TOKEN: {
    	< ASS: ":=" > 
    |	< ADD: "+" >		
    |	< SUB: "-" >		
    |	< MUL: "*" >		
    |	< DIV: "div" >		
    |	< MOD: "mod" >		
    |	< EQ: "=" >		
    |	< NE: "<>" >	
    |	< LT: "<" >	
    |	< GT: ">" >
    |	< LE: "<=" >	
    |	< GE: ">=" >	
    |	< AND: "and" >		
    |	< OR: "or" >		
    |	< NOT: "not" >		
}

//-----------------------------------------------------------------------------
// Declaracion de funciones y procedimientos.
TOKEN: {
		< FUNC: "function" >
	|	< PROC: "procedure" >
	|	< IS: "is" >			
	|	< VAL: "val" >		
	|	< REF: "ref" >		
	|	< RETURN: "return" >	
}


//-----------------------------------------------------------------------------
// Declaracion de funciones existentes en adac.
TOKEN: {
		< PUT: "put" >
	|	< PUTLINE: "put_line" >
	| 	< CHAR2INT: "char2int" >
	|	< INT2CHAR: "int2char" >
	|   < SKIPLINE: "skip_line" >
	|	< GET: "get" >
}

//-----------------------------------------------------------------------------
// Declaracion de estructuras de control: if & while.
TOKEN: {
    	< IF: "if" > 
	| 	< THEN: "then" >
	| 	< ELSE: "else" >
	|	< WHILE: "while" >
    |	< DO: "do" >	
}

//-----------------------------------------------------------------------------
// Declaracion de cuerpo.
TOKEN: {
		< BEGIN: "begin" > 
	| 	< END: "end" >
}

//-----------------------------------------------------------------------------
// Declaracion de nombres.
TOKEN: {
	< ID: ("_" | < LETTER > | < LETTER >"_")(< LETTER > | < LETTER >"_" | < DIGIT > | < DIGIT >"_")* >
}

//-----------------------------------------------------------------------------
// Errores.
SPECIAL_TOKEN: {
	< UNKNOWN: (~[]) >	
		{ 
			System.err.println("ERROR LEXICO: (" + 
				matchedToken.beginLine + "," + matchedToken.beginColumn + 
				"): simbolo no reconocido: " + matchedToken);
		}
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
// ANALIZADOR SINTATICO & SEMANTICO.
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
// Declaracion del procedimiento principal del fichero.
void main() :
{
	Attributes at = new Attributes(Types.PROCEDURE, Types.UNDEFINED, null, true);
	Token t;
} 
{	
	try {
		<PROC> 
		t = <ID> { sf.AddMethod(st, at, t); }
		<IS> 
		vars_def(at) 
		procs_funcs_decl() 
		proc_func_body(at)
		<EOF>
	} catch (ParseException e) {
		panicMode(e.currentToken.next, 0);
	}

}

//-----------------------------------------------------------------------------
// Declaracion de procedimientos/funciones del fichero.
void procs_funcs_decl ():
{} {
	(proc_func_decl())*
}

//-----------------------------------------------------------------------------
// Declaracion de procedimiento/funcion
void proc_func_decl():
{
	Attributes at = new Attributes();
	Token t;
} {
	proc_or_func(at)
	func_return(at)
	t = <ID> { sf.AddMethod(st, at, t); }
	<LPAREN>
	params_def(at) { at.params = null; }
	<RPAREN> 
	<IS>
	vars_def(at) 
	procs_funcs_decl()
	proc_func_body(at)
}

//-----------------------------------------------------------------------------
// Declaracion de si es procedimiento o funcion.
void proc_or_func(Attributes at):
{} {
		<PROC> { at.type = Types.PROCEDURE; } 
	| 	<FUNC> { at.type = Types.FUNCTION;  }
}

//-----------------------------------------------------------------------------
// Tipo de dato que devuelve la funcion.
void func_return(Attributes at):
{} {
		vars_type(at) { sf.EvaluateDefinedReturnType(at, Types.FUNCTION); }
	| 	{} { sf.EvaluateDefinedReturnType(at, Types.PROCEDURE); }
}

//-----------------------------------------------------------------------------
// Parametros de procedimiento/funcion.
void params_def(Attributes at):
{} {
	(param_class(at) vars_decl(at) (<SCOLON> param_class(at) vars_decl(at))*)?
}

//-----------------------------------------------------------------------------
// Clase del parametro: por valor o por referencia.
void param_class(Attributes at):
{} {
		<VAL> { at.parClass = ParameterClass.VAL; }
	| 	<REF> { at.parClass = ParameterClass.REF; }
}

//-----------------------------------------------------------------------------
// Variables de procedimiento/funcion.
void vars_def(Attributes at):
{} {
	{ at.parClass = ParameterClass.NONE; }
	( vars_decl(at) <SCOLON> )*
}

//-----------------------------------------------------------------------------
// Tipos de variable y variables asociadas.
void vars_decl(Attributes at):
{} {
	vars_type(at) vars_list(at)
}


//-----------------------------------------------------------------------------
// Tipos de una variable.
void vars_type(Attributes at):
{} {
		<INT>  { at.baseType = Types.INT;  }
	| 	<BOOL> { at.baseType = Types.BOOL; }
	| 	<CHAR> { at.baseType = Types.CHAR; }
}

//-----------------------------------------------------------------------------
// Variables del mismo tipo.
void vars_list(Attributes at):
{}
{
	var(at) ( <COLON> var(at))*
}

//-----------------------------------------------------------------------------
// Nombre de la variable.
void var(Attributes at):
{
	Token t, ind;
} 
{
	LOOKAHEAD(2) t = <ID> <LBRACK> ind = <INTVAL> <RBRACK> 
		{ 	
			at.type = Types.ARRAY;
			sf.AddVar(st, at, t, Integer.parseInt(ind.image));
		}
	| 	t = <ID> 
		{
			at.type = Types.UNDEFINED;
			sf.AddVar(st, at, t , 0);
		}
}

//-----------------------------------------------------------------------------
// Cuerpo de procedimiento/funcion.
void proc_func_body(Attributes at):
{} {
	try {
		<BEGIN> 
		instructions_list(at) 
		<END> {
			if (at.type == Types.PROCEDURE && at.haveReturn) 
				System.err.println("Error -- return in procedure?");
			else if (at.type == Types.FUNCTION && !at.haveReturn)
				System.err.println("Error -- no return in function?");
			st.removeBlock(); 
		}
	} catch (ParseException e) {
		panicMode(e.currentToken.next, 1);
	}

}

//-----------------------------------------------------------------------------
// Conjunto de instrucciones.
void instructions_list(Attributes at):
{} {
	(instruction(at))*
}

//-----------------------------------------------------------------------------
// Instruccion:
//	- Procedimientos predefinidos: get, put, putline, skipline.
//  - Procedimientos del usuario.
//	- Asignacion.
//	- While/If-Else.
//	- Return.
void instruction(Attributes at):
{
	Attributes fst = new Attributes(), snd = new Attributes();
	Token t;
} {
	  	<GET> <LPAREN> assignable(fst) { sf.EvaluateGet(fst); }
		(<COLON> assignable(fst) { sf.EvaluateGet(fst); } )* <RPAREN> <SCOLON>
	| 	<PUT> <LPAREN> expression(fst) { sf.EvaluatePut(fst);}
		(<COLON> expression(fst){ sf.EvaluatePut(fst); } )* <RPAREN> <SCOLON> 
	| 	<PUTLINE> <LPAREN> (expression(fst){ sf.EvaluatePutline(fst); }
		(<COLON> expression(fst){ sf.EvaluatePutline(fst); })*)? <RPAREN> <SCOLON> 
	| 	<SKIPLINE> <LPAREN> <RPAREN> <SCOLON> 
	| 	LOOKAHEAD(2) t = <ID> { fst.name = t.image; } 
		<LPAREN> (
			expression(snd) { fst.given.add(snd); } 
			(<COLON> {snd = new Attributes(); } expression(snd) {fst.given.add(snd); })*
		)? <RPAREN> <SCOLON> { sf.EvaluateProcedure(st, fst); }
	| 	assignable(fst) <ASS> expression(snd) <SCOLON> { sf.EvaluateExpression(fst,snd); }
	|	<WHILE> expression(fst) { sf.EvaluateExpression(fst, Types.BOOL, 0); }
		<DO> instructions_list(at) <END>
	| 	<IF> expression(fst) { sf.EvaluateExpression(fst, Types.BOOL, 1); }
		<THEN> instructions_list(at) (<ELSE> instructions_list(at))? <END> 
	| 	<RETURN> expression(fst) <SCOLON> { SemanticFunctions.comprobarReturnIf(at,fst);}
}

//-----------------------------------------------------------------------------
// Elementos asignables.
void assignable(Attributes at):
{
	Token t;
}
{
		LOOKAHEAD(2) t = <ID> <LBRACK> expression(at) <RBRACK> {
			sf.CheckIntegerIndexing(at.baseType);
			sf.CheckAssignable(st, at, t, Types.ARRAY);
		}
	| 	t = <ID> { sf.CheckAssignable(st, at, t, Types.UNDEFINED); }

}


//-----------------------------------------------------------------------------
// Expresion relacional.
void expression(Attributes at): 
{
	Attributes fst = new Attributes();
	Attributes snd = new Attributes();
}
{
	simple_expr(fst) { at.name = fst.name; at.baseType = fst.baseType; at.parClass = fst.parClass; }
	(relational_op(fst) simple_expr(snd) { sf.EvaluateExpression(at, fst, snd); } )?
}

//-----------------------------------------------------------------------------
// Expresion aritmetica.
void simple_expr(Attributes at): 
{
	Attributes fst = new Attributes();
	Attributes snd = new Attributes();
} 
{
	( <ADD> | <SUB> )? term(fst) { at.name = fst.name; at.baseType = fst.baseType; at.parClass = fst.parClass; }
	( additive_op(fst) term(snd) { sf.EvaluateExpression(at, fst, snd); })*
	
} 

//-----------------------------------------------------------------------------
// Expresion multiplicativa.
void term(Attributes at):
{
	Attributes fst = new Attributes();
	Attributes snd = new Attributes();
}
{
	factor(fst) { at.name = fst.name; at.baseType = fst.baseType; at.parClass = fst.parClass; }
	(multiplicative_op(fst) factor(snd) { sf.EvaluateExpression(at, fst, snd); })*
}

void factor(Attributes at):
{
	Attributes fst = new Attributes();
	Attributes snd = new Attributes();
	int i = 0;
	SymbolFunction s = null;
	Token t;
} {
	  	<NOT> factor(at) { sf.EvaluateExpression(at); }
	| 	<LPAREN> expression(at) <RPAREN> 
	| 	<INT2CHAR> <LPAREN> expression(fst) { sf.CheckInt2Char(at, fst); } <RPAREN>
	| 	<CHAR2INT> <LPAREN> expression(fst) { sf.CheckChar2Int(at, fst); } <RPAREN>
	| 	LOOKAHEAD(2) t = <ID> { fst.name = t.image; ); }
		<LPAREN> (
			expression(snd) { fst.given.add(snd);}
			(<COLON> {snd = new Attributes(); } expression(snd) { fst.given.add(snd); })*
		)? <RPAREN> { sf.EvaluateFunction(st, fst); }
	| 	LOOKAHEAD(2) t = <ID> <LBRACK> expression(fst) <RBRACK> { sf.CheckExpression(st, at, t, Types.ARRAY); } 
	| 	t = <ID> 	  { sf.CheckExpression(st, at, t, Types.UNDEFINED); }
	| 	t = <INTVAL>  { at.initInt(t.image);    } 
	| 	t = <CHARVAL> { at.initChar(t.image);   }
	| 	t = <BOOLVAL> { at.initBool(t.image);   }
	| 	t = <STRING>  { at.initString(t.image); }
}

void relational_op(Attributes at):
{} {
	(<EQ> | <LT> | <GT> | <LE> | <GE> | <NE> ) { at.op = Operator.CMP_OP; }
}

void additive_op(Attributes at):
{
	Token t;
} {
		(<ADD> | <SUB>) { at.op = Operator.INT_OP; }
	| 	<OR>  { at.op = Operator.BOOL_OP;  }
}

void multiplicative_op(Attributes at):
{
	Token t;
} {
	  	(<MUL> | <MOD> | <DIV>) { at.op = Operator.INT_OP; }
	|	<AND> { at.op = Operator.BOOL_OP; }
}
