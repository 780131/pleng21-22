//-----------------------------------------------------------------------------
// - File: adac_4.jj
// - Author: Sergio Gabete César (774631) & Devid Dokash (780131).
// - Date: 17/05/2022 (last version).
// - Coms: https://javacc.github.io/javacc/tutorials/token-manager.html. Imple-
// mentacion del analizador sintactico.
// - Version: 3.
// - Version-Info: analizador semantico.
//-----------------------------------------------------------------------------

options {
   //COMMON_TOKEN_ACTION = true;
}

PARSER_BEGIN(adac_4)
package traductor;
import lib.attributes.Attributes;
import lib.symbolTable.*;
import lib.symbolTable.exceptions.*;
import lib.symbolTable.Symbol.ParameterClass;
import lib.symbolTable.Symbol.Types;
import lib.tools.SemanticFunctions;
import lib.tools.SemanticFunctions.Operator;
import lib.tools.exceptions.*;
import java.util.ArrayList;

public class adac_4 {

	//Se declara la tabla de simbolos
	static SymbolTable st;
	static SemanticFunctions sf;

	static int synt_errors = 0;

	//Funcion que a lo mejor hay que cambiar
	private static void initSymbolTable() {
		boolean b;
		String[] palsRes = {
	    	"var","const","escribir"
		};

		st.insertReservedWords(palsRes);
	}

	public static void panicMode(Token err, int type) {
		synt_errors++;
		System.err.println("ERROR SINTACTICO: (" + err.beginLine + "," 
			+ err.beginColumn + "): " + err);
		System.err.println("----> Iniciando recuperacion en modo panico..."
			+ "\n----> Saltando todo hasta token de conjunto de sincronizacion");
		Token t = getNextToken();
		if (type == 0) {
			while(t.kind != EOF) {
				System.err.println("Descartando token ("
					+ adac_4Constants.tokenImage[t.kind] + "," + t.image + ")");
				t = getNextToken();
			}
		} else {
			while(t.kind != SCOLON && t.kind != END && t.kind != EOF) {
				System.err.println("Descartando token ("
					+ adac_4Constants.tokenImage[t.kind] + "," + t.image + ")");
				t = getNextToken();
			}
		}
	}


    public static void main(String[] args) throws java.io.FileNotFoundException, 
			ParseException 
	{
    	adac_4 parser;

    	try {
			//Se iniciar y crea la tabla de simbolos pero esta vacia
			st = new SymbolTable();
    		initSymbolTable();
			sf = new SemanticFunctions(st);

			// Entrada desde stdin.
	    	if(args.length == 0) {
				parser = new adac_4(System.in);
			}
			// Entrada desde fichero en args[0].
			else {
	            parser = new adac_4(new java.io.FileInputStream(args[0])); 
			}
			// Invoca símbolo inicial de la gramática.
			parser.main();
			if ((synt_errors + sf.getErrors()) == 0) System.out.println("Compilation succeded.");
			else {
				System.out.println("\nCompilation failed due to errors: " 
					+ synt_errors + " syntatic error(s), " 
					+ sf.getWarnings() + " warning(s), " 
					+ sf.getErrors() + " error(s).");
			}
		} catch (java.io.FileNotFoundException e) {
			System.err.println ("Fichero " + args[0] + " no encontrado.");
		} catch (TokenMgrError e) {
        	System.err.println("LEX_ERROR: " + e.getMessage());
        } 
    }
}
PARSER_END(adac_4)

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
// ANALIZADOR LEXICO.
//-----------------------------------------------------------------------------
// Se ignoran espacios, saltos de linea, caracteres que no aportan informacion
// al analisis lexico.
SKIP: {
	" " | "\t" | "\r" | "\n" | "\r\n"
}

//-----------------------------------------------------------------------------
// Funcion global para todos los tokens. Imprimir por pantalla la linea, la 
// columna, el tipo de token y el valor del token que ha hecho match.
//TOKEN_MGR_DECLS: {
//	static void CommonTokenAction(Token t){
//		System.out.println("(" + t.beginLine + "," + t.beginColumn + "): " 
//			+ adac_4Constants.tokenImage[t.kind] + " \"" + t + "\"");
//	}
//}

//-----------------------------------------------------------------------------
// Conjuntos.
TOKEN: {
 		< #LETTER: ["a"-"z","A"-"Z"] >
	|	< #DIGIT: ["0"-"9"] >
}

//-----------------------------------------------------------------------------
// Comentarios: SPECIAL_TOKEN ya que interesa ignorar los comentarios y no 
// procesarlos.
SPECIAL_TOKEN: {
	< COMMENT: "--"(~["\n"])*("\n")? >
}

//-----------------------------------------------------------------------------
// Sintaxis general.
TOKEN: {
		< SCOLON: ";" >
	|	< COLON: "," >
	|	< LPAREN: "(" > 
	|	< RPAREN: ")" > 
	|	< LBRACK: "[" > 
	|	< RBRACK: "]" >
}

//-----------------------------------------------------------------------------
// Tipos y constantes: enteros, booleanos y caracteres, tanto como dato simple
// como array. En algunas funciones se permite el uso de strings pero no como
// variables.
TOKEN: {
		< INT: "integer" >				
	|	< BOOL: "boolean" >				
	|	< CHAR: "character" >			
	|	< INTVAL: (< DIGIT >)+ >	
	|   < CHARVAL: "'"(~[])"'" >			
	|   < BOOLVAL: "true" | "false" >
	|	< STRING: "\""(~["\""])*"\"" >
}

//-----------------------------------------------------------------------------
// Operaciones de asignacion y aritmeticologicas.
TOKEN: {
    	< ASS: ":=" > 
    |	< ADD: "+" >		
    |	< SUB: "-" >		
    |	< MUL: "*" >		
    |	< DIV: "div" >		
    |	< MOD: "mod" >		
    |	< EQ: "=" >		
    |	< NE: "<>" >	
    |	< LT: "<" >	
    |	< GT: ">" >
    |	< LE: "<=" >	
    |	< GE: ">=" >	
    |	< AND: "and" >		
    |	< OR: "or" >		
    |	< NOT: "not" >		
}

//-----------------------------------------------------------------------------
// Declaracion de funciones y procedimientos.
TOKEN: {
		< FUNC: "function" >
	|	< PROC: "procedure" >
	|	< IS: "is" >			
	|	< VAL: "val" >		
	|	< REF: "ref" >		
	|	< RETURN: "return" >	
}


//-----------------------------------------------------------------------------
// Declaracion de funciones existentes en adac.
TOKEN: {
		< PUT: "put" >
	|	< PUTLINE: "put_line" >
	| 	< CHAR2INT: "char2int" >
	|	< INT2CHAR: "int2char" >
	|   < SKIPLINE: "skip_line" >
	|	< GET: "get" >
}

//-----------------------------------------------------------------------------
// Declaracion de estructuras de control: if & while.
TOKEN: {
    	< IF: "if" > 
	| 	< THEN: "then" >
	| 	< ELSE: "else" >
	|	< WHILE: "while" >
    |	< DO: "do" >	
}

//-----------------------------------------------------------------------------
// Declaracion de cuerpo.
TOKEN: {
		< BEGIN: "begin" > 
	| 	< END: "end" >
}

//-----------------------------------------------------------------------------
// Declaracion de nombres.
TOKEN: {
	< ID: ("_" | < LETTER > | < LETTER >"_")(< LETTER > | < LETTER >"_" | < DIGIT > | < DIGIT >"_")* >
}

//-----------------------------------------------------------------------------
// Errores.
SPECIAL_TOKEN: {
	< UNKNOWN: (~[]) >	
		{ 
			System.err.println("ERROR LEXICO: (" + 
				matchedToken.beginLine + "," + matchedToken.beginColumn + 
				"): simbolo no reconocido: " + matchedToken);
		}
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
// ANALIZADOR SINTATICO & SEMANTICO.
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
// Declaracion del procedimiento principal del fichero.
void main() :
{
	Attributes main = new Attributes(Types.PROCEDURE, Types.UNDEFINED, null, true);
	Token t;
} 
{	
	try {
		<PROC>
		t = <ID> { sf.AddMethod(main, t); }
		<IS>
		vars_def()
		procs_funcs_decl()
		proc_func_body(main)
		<EOF>
	} catch (ParseException e) {
		panicMode(e.currentToken.next, 0);
	}

}

//-----------------------------------------------------------------------------
// Declaracion de procedimientos/funciones del fichero.
void procs_funcs_decl ():
{} {
	(proc_func_decl())*
}

//-----------------------------------------------------------------------------
// Declaracion de procedimiento/funcion
void proc_func_decl():
{
	Attributes at = new Attributes();
	Token t;
} {
	proc_or_func(at)
	func_return(at)
	t = <ID> { sf.EvaluateReturnTypeDef(at, t); sf.AddMethod(at, t); }
	<LPAREN>
	params_def(at.params)
	<RPAREN>
	<IS>
	vars_def()
	procs_funcs_decl()
	proc_func_body(at)
}

//-----------------------------------------------------------------------------
// Declaracion de si es procedimiento o funcion.
void proc_or_func(Attributes at):
{} {
		<PROC> { at.type = Types.PROCEDURE; } 
	| 	<FUNC> { at.type = Types.FUNCTION;  }
}

//-----------------------------------------------------------------------------
// Tipo de dato que devuelve la funcion.
void func_return(Attributes at):
{} {
	vars_type(at)
	| {} { at.baseType = Types.UNDEFINED; }
}

//-----------------------------------------------------------------------------
// Parametros de procedimiento/funcion.
void params_def(ArrayList<Symbol> params):
{
	Attributes at = new Attributes(params);
} {
	(param_class(at) vars_decl(at) (<SCOLON> param_class(at) vars_decl(at))*)?
}

//-----------------------------------------------------------------------------
// Clase del parametro: por valor o por referencia.
void param_class(Attributes at):
{} {
		<VAL> { at.parClass = ParameterClass.VAL; }
	| 	<REF> { at.parClass = ParameterClass.REF; }
}

//-----------------------------------------------------------------------------
// Variables de procedimiento/funcion.
void vars_def():
{
	Attributes at = new Attributes(ParameterClass.NONE);
} {
	( vars_decl(at) <SCOLON> )*
}

//-----------------------------------------------------------------------------
// Tipos de variable y variables asociadas.
void vars_decl(Attributes at):
{} {
	vars_type(at) vars_list(at)
}


//-----------------------------------------------------------------------------
// Tipos de una variable.
void vars_type(Attributes at):
{
	Token t;
} {
		t = <INT>  { at.baseType = Types.INT; at.line = t.beginLine; at.column = t.beginColumn; }
	| 	t = <BOOL> { at.baseType = Types.BOOL; at.line = t.beginLine; at.column = t.beginColumn; }
	| 	t = <CHAR> { at.baseType = Types.CHAR; at.line = t.beginLine; at.column = t.beginColumn; }
}

//-----------------------------------------------------------------------------
// Variables del mismo tipo.
void vars_list(Attributes at):
{}
{
	var(at) (<COLON> var(at))*
}

//-----------------------------------------------------------------------------
// Nombre de la variable.
void var(Attributes at):
{
	Token t, ind;
} 
{
	LOOKAHEAD(2) t = <ID> <LBRACK> ind = <INTVAL> <RBRACK> 
		{ sf.AddVar(at, t, ind, Types.ARRAY); }
	| t = <ID>
		{ sf.AddVar(at, t, null, Types.UNDEFINED); }
}

//-----------------------------------------------------------------------------
// Cuerpo de procedimiento/funcion.
void proc_func_body(Attributes at):
{
	Token t;
} {
	try {
		<BEGIN> 
		instructions_list(at) 
		t = <END> { sf.EvaluateReturn(at, t); st.removeBlock(); }
	} catch (ParseException e) {
		panicMode(e.currentToken.next, 1);
	}

}

//-----------------------------------------------------------------------------
// Conjunto de instrucciones.
void instructions_list(Attributes at):
{} {
	(instruction(at))*
}

//-----------------------------------------------------------------------------
// Instruccion:
//	- Procedimientos predefinidos: get, put, putline, skipline.
//  - Procedimientos del usuario.
//	- Asignacion.
//	- While/If-Else.
//	- Return.
void instruction(Attributes at):
{
	Attributes fst = new Attributes(), snd = new Attributes();
	Token t;
} {
		<GET> <LPAREN> assignable(fst) { sf.EvaluateGet(fst); } 
			( <COLON> assignable(fst) { sf.EvaluateGet(fst); } )* <RPAREN> <SCOLON>
	| 	<PUT> <LPAREN> expression(fst) { sf.EvaluatePut(fst); } 
			(<COLON> expression(fst) { sf.EvaluatePut(fst); })* <RPAREN> <SCOLON> 
	| 	<PUTLINE> <LPAREN> (expression(fst) { sf.EvaluatePutline(fst); }
			(<COLON> expression(fst) { sf.EvaluatePutline(fst); })*)? <RPAREN> <SCOLON> 
	| 	<SKIPLINE> <LPAREN> <RPAREN> <SCOLON> 
	| 	LOOKAHEAD(2) t = <ID> { snd.method = true; }
			<LPAREN> (expression(snd) { fst.given.add(snd); } 
			(<COLON> {snd = new Attributes(true); } expression(snd) {fst.given.add(snd); })*
			)? <RPAREN> <SCOLON> { sf.EvaluateProcedure(fst, t); }
	| 	assignable(fst) <ASS> expression(snd) { sf.EvaluateAssignation(fst, snd); } <SCOLON> 
	|	<WHILE> expression(fst) { sf.EvaluateCondition(fst); }
			<DO> instructions_list(at) <END>
	| 	<IF> expression(fst) { sf.EvaluateCondition(fst); } <THEN> instructions_list(at) 
			(<ELSE> instructions_list(at))? <END> 
	| 	t = <RETURN> expression(fst) { sf.EvaluateReturn(at, fst, t); } <SCOLON> 
}

//-----------------------------------------------------------------------------
// Elementos asignables.
void assignable(Attributes at):
{
	Attributes aux = new Attributes();
	Token t;
}
{
	LOOKAHEAD(2) t = <ID> <LBRACK> expression(aux) <RBRACK> { sf.EvaluateArray(at, aux, t); }
	| t = <ID> { sf.EvaluateVar(at, t); }
}


//-----------------------------------------------------------------------------
// Expresion relacional.
void expression(Attributes at): 
{
	Attributes aux = new Attributes();
}
{
	simple_expr(at) (relational_op(aux) simple_expr(aux) {sf.EvaluateOperation(at, aux); })?
}

//-----------------------------------------------------------------------------
// Expresion aritmetica.
void simple_expr(Attributes at): 
{
	Attributes aux = new Attributes();
	Token t = null;
} 
{
	((t = <ADD> | t = <SUB>) { at.op = Operator.INT_OP; })? term(at) { sf.EvaluateOperation(at, t); }
	(additive_op(aux) term(aux) { sf.EvaluateOperation(at, aux); })*
}

//-----------------------------------------------------------------------------
// Expresion multiplicativa.
void term(Attributes at):
{
	Attributes aux = new Attributes();
}
{
	factor(at) (multiplicative_op(aux) factor(aux) { sf.EvaluateOperation(at, aux); })*
}

void factor(Attributes at):
{
	Attributes aux = new Attributes();
	Token t;
} {
	  	t = <NOT> factor(at) { sf.EvaluateCondition(at, t); }
	| 	<LPAREN> expression(at) <RPAREN> 
	| 	t = <INT2CHAR> <LPAREN> expression(aux) <RPAREN> { sf.EvaluateInt2Char(at, aux, t); }
	| 	t = <CHAR2INT> <LPAREN> expression(aux) <RPAREN> { sf.EvaluateChar2Int(at, aux, t); }
	| 	LOOKAHEAD(2) t = <ID> { aux.method = true; } 
			<LPAREN> (expression(aux) { at.given.add(aux); } 
			(<COLON> {aux = new Attributes(true); } expression(aux) { at.given.add(aux); })*
		)? <RPAREN> { sf.EvaluateFunction(at, t); }
	| 	LOOKAHEAD(2) t = <ID> <LBRACK> expression(aux) <RBRACK> { sf.EvaluateArray(at, aux, t); } 
	| 	t = <ID> { if (at.method) { sf.EvaluateParam(at, t); } else { sf.EvaluateVar(at, t); } }
	| 	t = <INTVAL> { sf.EvaluateInt(at, t); }
	| 	t = <CHARVAL> { sf.EvaluateChar(at, t); }
	| 	t = <BOOLVAL> { sf.EvaluateBool(at, t); }
	| 	t = <STRING> { sf.EvaluateString(at, t); }
}

void relational_op(Attributes at):
{
	Token t;
} {
	( t = <EQ> | t = <LT> | t = <GT> | t = <LE> | t = <GE> | t = <NE> )
		{ sf.EvaluateOperator(at, t, Operator.CMP_OP); }
}

void additive_op(Attributes at):
{
	Token t;
} {
	( t = <ADD> | t = <SUB> )
		{ sf.EvaluateOperator(at, t, Operator.INT_OP); }
	| t = <OR> 
		{ sf.EvaluateOperator(at, t, Operator.BOOL_OP); }
}

void multiplicative_op(Attributes at):
{
	Token t;
} {
	( t = <MUL> | t = <MOD> | t = <DIV> ) 
		{ sf.EvaluateOperator(at, t, Operator.INT_OP); }
	| t = <AND>
		{ sf.EvaluateOperator(at, t, Operator.BOOL_OP); }
}
