/* adac.java */
/* Generated By:JavaCC: Do not edit this line. adac.java */
package traductor;

public class adac implements adacConstants {
    public static void main(String[] args) throws java.io.FileNotFoundException, ParseException {
        adac parser;

        try {
                if(args.length == 0) { // Entrada desde stdin.
                                parser = new adac(System.in);
                        }
                        else { // Entrada desde fichero en args[0].
                    parser = new adac(new java.io.FileInputStream(args[0]));
                        }
                        parser.S(); // Invoca símbolo inicial de la gramática.
                        System.out.println("Compilacion con exito");

                } catch (java.io.FileNotFoundException e) {
                        System.err.println ("Fichero " + args[0] + " no encontrado.");
                } catch (TokenMgrError e) {
                System.err.println("LEX_ERROR: " + e.getMessage());
        }
    }

//-- Símbolo inicial de la gramática. Para análisis léxico no hace falta más
  static final public void S() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SEMICOLON:{
        jj_consume_token(SEMICOLON);
        break;
        }
      case COLON:{
        jj_consume_token(COLON);
        break;
        }
      case LPAREN:{
        jj_consume_token(LPAREN);
        break;
        }
      case RPAREN:{
        jj_consume_token(RPAREN);
        break;
        }
      case LBRACK:{
        jj_consume_token(LBRACK);
        break;
        }
      case RBRACK:{
        jj_consume_token(RBRACK);
        break;
        }
      case INTDEF:{
        jj_consume_token(INTDEF);
        break;
        }
      case BOOLDEF:{
        jj_consume_token(BOOLDEF);
        break;
        }
      case CHARDEF:{
        jj_consume_token(CHARDEF);
        break;
        }
      case INTVAL:{
        jj_consume_token(INTVAL);
        break;
        }
      case CHARVAL:{
        jj_consume_token(CHARVAL);
        break;
        }
      case BOOLVAL:{
        jj_consume_token(BOOLVAL);
        break;
        }
      case STRING:{
        jj_consume_token(STRING);
        break;
        }
      case ASSIGN:{
        jj_consume_token(ASSIGN);
        break;
        }
      case ADD:{
        jj_consume_token(ADD);
        break;
        }
      case SUB:{
        jj_consume_token(SUB);
        break;
        }
      case MUL:{
        jj_consume_token(MUL);
        break;
        }
      case DIV:{
        jj_consume_token(DIV);
        break;
        }
      case MOD:{
        jj_consume_token(MOD);
        break;
        }
      case EQUAL:{
        jj_consume_token(EQUAL);
        break;
        }
      case NE:{
        jj_consume_token(NE);
        break;
        }
      case LT:{
        jj_consume_token(LT);
        break;
        }
      case GT:{
        jj_consume_token(GT);
        break;
        }
      case LE:{
        jj_consume_token(LE);
        break;
        }
      case GE:{
        jj_consume_token(GE);
        break;
        }
      case AND:{
        jj_consume_token(AND);
        break;
        }
      case OR:{
        jj_consume_token(OR);
        break;
        }
      case NOT:{
        jj_consume_token(NOT);
        break;
        }
      case FUNC:{
        jj_consume_token(FUNC);
        break;
        }
      case PROC:{
        jj_consume_token(PROC);
        break;
        }
      case IS:{
        jj_consume_token(IS);
        break;
        }
      case VALPAR:{
        jj_consume_token(VALPAR);
        break;
        }
      case REFPAR:{
        jj_consume_token(REFPAR);
        break;
        }
      case RETURN:{
        jj_consume_token(RETURN);
        break;
        }
      case PUT:{
        jj_consume_token(PUT);
        break;
        }
      case PUTLINE:{
        jj_consume_token(PUTLINE);
        break;
        }
      case CHAR2INT:{
        jj_consume_token(CHAR2INT);
        break;
        }
      case INT2CHAR:{
        jj_consume_token(INT2CHAR);
        break;
        }
      case IF:{
        jj_consume_token(IF);
        break;
        }
      case THEN:{
        jj_consume_token(THEN);
        break;
        }
      case ELSE:{
        jj_consume_token(ELSE);
        break;
        }
      case WHILE:{
        jj_consume_token(WHILE);
        break;
        }
      case DO:{
        jj_consume_token(DO);
        break;
        }
      case BEGIN:{
        jj_consume_token(BEGIN);
        break;
        }
      case END:{
        jj_consume_token(END);
        break;
        }
      case ID:{
        jj_consume_token(ID);
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SEMICOLON:
      case COLON:
      case LPAREN:
      case RPAREN:
      case LBRACK:
      case RBRACK:
      case INTDEF:
      case BOOLDEF:
      case CHARDEF:
      case INTVAL:
      case CHARVAL:
      case BOOLVAL:
      case STRING:
      case ASSIGN:
      case ADD:
      case SUB:
      case MUL:
      case DIV:
      case MOD:
      case EQUAL:
      case NE:
      case LT:
      case GT:
      case LE:
      case GE:
      case AND:
      case OR:
      case NOT:
      case FUNC:
      case PROC:
      case IS:
      case VALPAR:
      case REFPAR:
      case RETURN:
      case PUT:
      case PUTLINE:
      case CHAR2INT:
      case INT2CHAR:
      case IF:
      case THEN:
      case ELSE:
      case WHILE:
      case DO:
      case BEGIN:
      case END:
      case ID:{
        ;
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
    }
    jj_consume_token(0);
}

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public adacTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[2];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0xffffff00,0xffffff00,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x3fffff,0x3fffff,};
	}

  /** Constructor with InputStream. */
  public adac(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public adac(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new adacTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public adac(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new adacTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new adacTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public adac(adacTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(adacTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[55];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 2; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 55; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
