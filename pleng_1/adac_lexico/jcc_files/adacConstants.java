/* Generated By:JavaCC: Do not edit this line. adacConstants.java */
package traductor;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface adacConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int LETTER = 5;
  /** RegularExpression Id. */
  int DIGIT = 6;
  /** RegularExpression Id. */
  int COMMENT = 7;
  /** RegularExpression Id. */
  int SEMICOLON = 8;
  /** RegularExpression Id. */
  int COLON = 9;
  /** RegularExpression Id. */
  int LPAREN = 10;
  /** RegularExpression Id. */
  int RPAREN = 11;
  /** RegularExpression Id. */
  int LBRACK = 12;
  /** RegularExpression Id. */
  int RBRACK = 13;
  /** RegularExpression Id. */
  int INTDEF = 14;
  /** RegularExpression Id. */
  int BOOLDEF = 15;
  /** RegularExpression Id. */
  int CHARDEF = 16;
  /** RegularExpression Id. */
  int INTVAL = 17;
  /** RegularExpression Id. */
  int CHARVAL = 18;
  /** RegularExpression Id. */
  int BOOLVAL = 19;
  /** RegularExpression Id. */
  int STRING = 20;
  /** RegularExpression Id. */
  int ASSIGN = 21;
  /** RegularExpression Id. */
  int ADD = 22;
  /** RegularExpression Id. */
  int SUB = 23;
  /** RegularExpression Id. */
  int MUL = 24;
  /** RegularExpression Id. */
  int DIV = 25;
  /** RegularExpression Id. */
  int MOD = 26;
  /** RegularExpression Id. */
  int EQUAL = 27;
  /** RegularExpression Id. */
  int NE = 28;
  /** RegularExpression Id. */
  int LT = 29;
  /** RegularExpression Id. */
  int GT = 30;
  /** RegularExpression Id. */
  int LE = 31;
  /** RegularExpression Id. */
  int GE = 32;
  /** RegularExpression Id. */
  int AND = 33;
  /** RegularExpression Id. */
  int OR = 34;
  /** RegularExpression Id. */
  int NOT = 35;
  /** RegularExpression Id. */
  int FUNC = 36;
  /** RegularExpression Id. */
  int PROC = 37;
  /** RegularExpression Id. */
  int IS = 38;
  /** RegularExpression Id. */
  int VALPAR = 39;
  /** RegularExpression Id. */
  int REFPAR = 40;
  /** RegularExpression Id. */
  int RETURN = 41;
  /** RegularExpression Id. */
  int PUT = 42;
  /** RegularExpression Id. */
  int PUTLINE = 43;
  /** RegularExpression Id. */
  int CHAR2INT = 44;
  /** RegularExpression Id. */
  int INT2CHAR = 45;
  /** RegularExpression Id. */
  int IF = 46;
  /** RegularExpression Id. */
  int THEN = 47;
  /** RegularExpression Id. */
  int ELSE = 48;
  /** RegularExpression Id. */
  int WHILE = 49;
  /** RegularExpression Id. */
  int DO = 50;
  /** RegularExpression Id. */
  int BEGIN = 51;
  /** RegularExpression Id. */
  int END = 52;
  /** RegularExpression Id. */
  int ID = 53;
  /** RegularExpression Id. */
  int UNKNOWN = 54;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\r\"",
    "\"\\n\"",
    "<LETTER>",
    "<DIGIT>",
    "<COMMENT>",
    "\";\"",
    "\",\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"integer\"",
    "\"boolean\"",
    "\"character\"",
    "<INTVAL>",
    "<CHARVAL>",
    "<BOOLVAL>",
    "<STRING>",
    "\":=\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"div\"",
    "\"mod\"",
    "\"=\"",
    "\"<>\"",
    "\"<\"",
    "\">\"",
    "\"<=\"",
    "\">=\"",
    "\"and\"",
    "\"or\"",
    "\"not\"",
    "\"function\"",
    "\"procedure\"",
    "\"is\"",
    "\"val\"",
    "\"ref\"",
    "\"return\"",
    "\"put\"",
    "\"put_line\"",
    "\"charToInt\"",
    "\"intToChar\"",
    "\"if\"",
    "\"then\"",
    "\"else\"",
    "\"while\"",
    "\"do\"",
    "\"begin\"",
    "\"end\"",
    "<ID>",
    "<UNKNOWN>",
  };

}
