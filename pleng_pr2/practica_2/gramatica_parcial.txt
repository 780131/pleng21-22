programa  : 
  <PROC>
  <ID>
  <IS>
  declaracion_variables
  declaracion_procs_funcs
  bloque_sentencias
  //bloque sentencias puede estar vacio pero siempre acaba en end

  

def_vars:
  ( define <SEMICOLON> )*

define:
  var_type vars_list

var_type:
  <INTDEF> | <CHARDEF> | <BOOLDEF>

next_var:
  the_var ( <COLON> next_var )*

the_var:
  LOOKAHEAD(2)
    <ID> <LBRACK> <INTVAL> <RBRACK>
  | <ID>

declaracion_procs_funcs :
  ( declaracion_proc_func )*

...

declaracion_funcion :
  cabecera_funcion
  declaracion_variables
  bloque_sentencias

...

dec_parametros :
  clase_parametros
  tipo_variable
  id_or_array ( <tC> id_or_array )*

id_or_array :
  LOOKAHEAD(2)
  <tID> <tACOR>  <tCONST_INT> <tCCOR>
| <tID>

...

instruccion :
  inst_leer <tPC>
| inst_saltar_linea <tPC> 
| inst_escribir <tPC> 
| inst_escribir_linea <tPC> 
| LOOKAHEAD(2)
    inst_invoc_proc <tPC> 
| inst_asignacion <tPC> 
| inst_seleccion
| inst_iteracion
| inst_return <tPC> 

inst_asignacion :
  asignable
  <tASSIGN>
  expresion

...

inst_iteracion :
  <tWHILE>
  expresion
  <tDO>
  lista_instruccionesO
  <tEND>

...

lista_cero_o_mas_exps:
  ( lista_una_o_mas_exps )?

... 

expresion : 
  expresion_simple ( operador_relacional expresion_simple )?

operador_relacional :
  <tIG>
| <tMEN>
| <tMAY>
| <tMENI>
| <tMAYI>
| <tDIF>

expresion_simple :  
  ( <tMAS> | <tMENOS> )?
  termino ( operador_aditivo termino )*

operador_aditivo :
  <tMAS>
| <tMENOS>
| <tOR>

termino :
  factor ( operador_multiplicativo factor )*

operador_multiplicativo :
  <tPROD>
| <tMOD>
| <tDIV>
| <tAND>

factor :
  <tNOT> factor
| <tAPAR> expresion <tCPAR>
| <tINT2CHAR> <tAPAR> expresion <tCPAR>
| <tCHAR2INT> <tAPAR> expresion <tCPAR>
| LOOKAHEAD(2)  <tID> <tAPAR> lista_cero_o_mas_exps <tCPAR>
| LOOKAHEAD(2)  <tID> <tACOR> expresion <tCCOR>
| <tID>
| <tCONST_INT>
| <tCONST_CHAR>
| <tCONST_STRING>
| <tTRUE>
| <tFALSE>